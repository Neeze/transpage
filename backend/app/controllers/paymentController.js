const { MomoClient, toExtraDataBase64, validateMomoCallback } = require("../lib/momo_capture_wallet");
const { Payment, User, ActivityLog } = require("../models");
const { success, error } = require("../helpers/response");
const { v4: uuidv4 } = require("uuid");

const VND_TO_POINTS = Number(process.env.VND_TO_POINTS) || 1000; // 1 point = 1000 VND
const MOMO_ENDPOINT = process.env.MOMO_ENDPOINT || "https://test-payment.momo.vn";
const MOMO_PARTNER_CODE = process.env.MOMO_PARTNER_CODE;
const MOMO_ACCESS_KEY = process.env.MOMO_ACCESS_KEY;
const MOMO_SECRET_KEY = process.env.MOMO_SECRET_KEY;

const momoClient = new MomoClient({
    endpoint: MOMO_ENDPOINT,
    partnerCode: MOMO_PARTNER_CODE,
    accessKey: MOMO_ACCESS_KEY,
    secretKey: MOMO_SECRET_KEY,
});

// ===================================================================
// üß© 1Ô∏è‚É£ Danh s√°ch g√≥i n·∫°p
// ===================================================================
exports.getPackages = async (req, res) => {
    try {
        const PACKAGES = [
            { id: 1, label: "G√≥i C∆° B·∫£n", amount: 50000, description: "Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu" },
            { id: 2, label: "G√≥i N√¢ng Cao", amount: 100000, description: "Ph·ªï bi·∫øn cho ng∆∞·ªùi d√πng th∆∞·ªùng xuy√™n" },
            { id: 3, label: "G√≥i Chuy√™n Nghi·ªáp", amount: 200000, description: "D√†nh cho ng∆∞·ªùi d√πng cao c·∫•p" },
            { id: 4, label: "G√≥i Doanh Nghi·ªáp", amount: 500000, description: "T·ªëi ƒëa l·ª£i √≠ch cho t·ªï ch·ª©c" },
            { id: 5, label: "G√≥i Test", amount: 5000, description: "Test" },
        ];

        const data = PACKAGES.map(pkg => ({
            ...pkg,
            points: Math.floor(pkg.amount / VND_TO_POINTS),
        }));

        return res.json({
            success: true,
            message: "Danh s√°ch g√≥i n·∫°p MoMo",
            data,
            rate: VND_TO_POINTS,
        });
    } catch (err) {
        console.error("‚ùå getPackages error:", err);
        return res.status(500).json({
            success: false,
            message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch g√≥i n·∫°p",
            error: err.message,
        });
    }
};

// ===================================================================
// üí∞ 2Ô∏è‚É£ Kh·ªüi t·∫°o thanh to√°n MoMo
// ===================================================================
exports.createPayment = async (req, res) => {
    try {
        const { amount, orderInfo } = req.body;
        const userId = req.user?.id;

        if (!userId) return error(res, "Unauthorized: User not found", null, 401, req);
        if (!amount || amount < 1000) return error(res, "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá (t·ªëi thi·ªÉu 1,000 VND)", null, 400, req);

        const requestId = `req-${Date.now()}`;
        const orderId = `order-${Date.now()}`;
        const redirectUrl = process.env.MOMO_REDIRECT_URL;
        const ipnUrl = process.env.MOMO_IPN_URL;
        const extraData = toExtraDataBase64({ userId });

        const payment = await Payment.create({
            orderId,
            requestId,
            userId,
            amount,
            points: Math.floor(amount / VND_TO_POINTS),
            orderInfo,
            status: "pending",
        });

        const momoRes = await momoClient.createPaymentCaptureWallet({
            requestId,
            orderId,
            amount,
            orderInfo,
            redirectUrl,
            ipnUrl,
            extraData,
            lang: "vi",
        });

        return success(
            res,
            "Kh·ªüi t·∫°o thanh to√°n MoMo th√†nh c√¥ng",
            {
                payUrl: momoRes.payUrl,
                deeplink: momoRes.deeplink,
                qrCodeUrl: momoRes.qrCodeUrl,
                orderId,
                requestId,
            },
            200,
            req
        );
    } catch (err) {
        console.error("‚ùå createPayment error:", err);
        return error(res, "T·∫°o thanh to√°n th·∫•t b·∫°i", err.message, 500, req);
    }
};

// ===================================================================
// üìú 3Ô∏è‚É£ L·ªãch s·ª≠ giao d·ªãch ng∆∞·ªùi d√πng
// ===================================================================
exports.getPaymentHistory = async (req, res) => {
    try {
        const userId = req.user.id;
        const page = parseInt(req.query.page) || 1;
        const pageSize = parseInt(req.query.pageSize) || 10;
        const offset = (page - 1) * pageSize;

        const { count, rows } = await Payment.findAndCountAll({
            where: { userId },
            order: [["createdAt", "DESC"]],
            attributes: [
                "id",
                "orderId",
                "requestId",
                "amount",
                "points",
                "orderInfo",
                "status",
                "payType",
                "transId",
                "message",
                "createdAt",
            ],
            limit: pageSize,
            offset,
        });

        return res.json({
            success: true,
            payments: rows,
            pagination: {
                total: count,
                page,
                pageSize,
                totalPages: Math.ceil(count / pageSize),
            },
        });
    } catch (err) {
        console.error("‚ùå Get payment history error:", err);
        return res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ thanh to√°n" });
    }
};

// ===================================================================
// üîî 4Ô∏è‚É£ IPN CALLBACK (CH√çNH TH·ª®C) ‚Äî C√≥ ActivityLog
// ===================================================================
exports.handleIPN = async (req, res) => {
    try {
        const validation = validateMomoCallback(req.body, {
            accessKey: MOMO_ACCESS_KEY,
            secretKey: MOMO_SECRET_KEY,
        });

        if (!validation.valid) {
            console.warn("‚ùå IPN Invalid:", validation.reason);
            return error(res, "IPN kh√¥ng h·ª£p l·ªá", validation.reason, 400, req);
        }

        const data = req.body;
        const payment = await Payment.findOne({ where: { orderId: data.orderId } });
        if (!payment) return error(res, "Kh√¥ng t√¨m th·∫•y giao d·ªãch", null, 404, req);

        if (payment.status !== "pending") {
            console.log(`‚ö†Ô∏è IPN b·ªã b·ªè qua (ƒë√£ x·ª≠ l√Ω): ${payment.status}`);
            return success(res, "ƒê√£ ghi nh·∫≠n IPN tr∆∞·ªõc ƒë√≥", { orderId: payment.orderId, status: payment.status }, 200, req);
        }

        payment.transId = data.transId;
        payment.resultCode = data.resultCode;
        payment.message = data.message;
        payment.payType = data.payType;
        payment.status = data.resultCode === 0 ? "success" : "failed";
        await payment.save();

        if (payment.status === "success") {
            const user = await User.findByPk(payment.userId);
            if (user) {
                const before = user.points;
                const change = payment.points;
                const after = before + change;
                await user.update({ points: after });

                // üßæ Ghi l·∫°i log
                await ActivityLog.create({
                    userId: user.id,
                    action: "MOMO_TOPUP_SUCCESS",
                    metadata: {
                        orderId: payment.orderId,
                        transId: payment.transId,
                        amount: payment.amount,
                        payType: payment.payType,
                    },
                    pointBefore: before,
                    pointChange: change,
                    pointAfter: after,
                });
            }
        }

        console.log(`‚úÖ IPN x·ª≠ l√Ω xong: ${payment.orderId} ‚Üí ${payment.status}`);
        return success(res, "IPN x√°c nh·∫≠n th√†nh c√¥ng", { orderId: payment.orderId, status: payment.status }, 200, req);
    } catch (err) {
        console.error("‚ùå handleIPN error:", err);
        return error(res, "L·ªói x·ª≠ l√Ω IPN", err.message, 500, req);
    }
};

// ===================================================================
// üîÑ 5Ô∏è‚É£ RETURN URL (ch·ªâ ƒëi·ªÅu h∆∞·ªõng, kh√¥ng c·∫≠p nh·∫≠t DB)
// ===================================================================
exports.handleRedirect = async (req, res) => {
    const FRONTEND_URL = `${process.env.FRONTEND_URL}/main/payment/result`;

    try {
        const validation = validateMomoCallback(req.query, {
            accessKey: MOMO_ACCESS_KEY,
            secretKey: MOMO_SECRET_KEY,
        });

        if (!validation.valid) {
            console.warn("‚ö†Ô∏è Invalid MoMo signature:", validation.reason);
            return res.redirect(`${FRONTEND_URL}?status=error&message=${encodeURIComponent("Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá")}`);
        }

        const { orderId, resultCode, message } = req.query;
        const payment = await Payment.findOne({ where: { orderId } });
        if (!payment) return res.redirect(`${FRONTEND_URL}?status=error&message=Kh√¥ng t√¨m th·∫•y giao d·ªãch`);

        let redirectStatus = "pending";
        let redirectMessage = "ƒêang ch·ªù x√°c nh·∫≠n thanh to√°n...";
        let pointsAdded = 0;

        if (payment.status === "success" || Number(resultCode) === 0) {
            redirectStatus = "success";
            redirectMessage = `Thanh to√°n th√†nh c√¥ng - ƒê√£ c·ªông ${payment.points} ƒëi·ªÉm`;
            pointsAdded = payment.points;
        } else if (payment.status === "failed") {
            const resultMap = {
                1001: "Ng∆∞·ªùi d√πng h·ªßy giao d·ªãch",
                1005: "Thanh to√°n b·ªã t·ª´ ch·ªëi",
                1006: "H·∫øt th·ªùi gian giao d·ªãch",
                9000: "H·ªá th·ªëng MoMo t·∫°m th·ªùi gi√°n ƒëo·∫°n",
            };
            redirectStatus = "failed";
            redirectMessage = resultMap[Number(resultCode)] || payment.message || message || "Thanh to√°n th·∫•t b·∫°i";
        }

        const redirectUrl =
            `${FRONTEND_URL}?status=${redirectStatus}` +
            `&orderId=${payment.orderId}` +
            `&message=${encodeURIComponent(redirectMessage)}` +
            `&points=${pointsAdded}` +
            `&amount=${payment.amount}` +
            `&code=${resultCode}`;

        console.log("‚û°Ô∏è Redirecting user to:", redirectUrl);
        return res.redirect(302, redirectUrl);
    } catch (err) {
        console.error("‚ùå handleRedirect error:", err);
        const failUrl = `${FRONTEND_URL}?status=error&message=${encodeURIComponent("L·ªói x·ª≠ l√Ω redirect")}`;
        return res.redirect(302, failUrl);
    }
};
